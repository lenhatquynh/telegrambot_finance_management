const TOKEN = "8039252069:AAHr4IVx94PGO_mk46WGPQqpNMQk31EkHPE";
const API_URL = `https://api.telegram.org/bot${TOKEN}`;
const SHEET_ID = "12Xx0wjNkAC78vUudv5ksjdhvzSPDsfvHcyMPK-KX_5E";
const ADMIN_IDS = ["5051988571"];
const startMessage = `
*Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng qu·∫£n l√Ω t√†i ch√≠nh c√° nh√¢n!*\n\n` +
  `üìå *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:*\n\n` +
  `1Ô∏è‚É£ *Th√™m giao d·ªãch:*\n   _Nh·∫≠p theo c√∫ ph√°p:_ <s·ªë ti·ªÅn> <thu/chi> <m√¥ t·∫£>.\n` +
  `   *V√≠ d·ª•:* \`14629k thu L∆∞∆°ng t1\`\n\n` +
  `2. *Xem b√°o c√°o:*\n` +
  `   - \`/report\`: B√°o c√°o t·ªïng.\n` +
  `   - \`/report mm/yyyy\`: B√°o c√°o th√°ng.\n` +
  `   - \`/report dd/mm/yyyy\`: B√°o c√°o tu·∫ßn (hi·ªÉn th·ªã tu·∫ßn c√≥ ng√†y ƒë∆∞·ª£c ch·ªçn).\n` +
  `   - Th√™m "az" ho·∫∑c "za" sau l·ªánh ƒë·ªÉ s·∫Øp x·∫øp:\n` +
  `     *V√≠ d·ª•:* \`/report az\` ho·∫∑c \`/report 01/2024 za\`\n` +
  `   - \`/getuid\`: L·∫•y userId c·ªßa b·∫£n th√¢n.\n\n` +
  `3Ô∏è‚É£ *Qu·∫£n l√Ω ng∆∞·ªùi d√πng(ch·ªâ Admin):*\n` +
  `   - \`/addusers <id>\`: _Th√™m user._\n` +
  `   - \`/delusers <id>\`: _X√≥a user._\n\n` +
  `4Ô∏è‚É£ *Kh√°c:*\n` +
  `   - \`/undo\`: _X√≥a giao d·ªãch g·∫ßn nh·∫•t._\n` +
  `   - \`/reset\`: _X√≥a d·ªØ li·ªáu c·ªßa b·∫£n th√¢n._\n` +
  `   - \`/resetall\`: _X√≥a t·∫•t c·∫£ d·ªØ li·ªáu (admin only)._\n\n` +
  `üí° *L∆∞u √Ω:*\n` +
  `- S·ªë ti·ªÅn c√≥ th·ªÉ nh·∫≠p d·∫°ng "1234k" (1,234,000) ho·∫∑c "1tr" (1,000,000).\n`
  ;

function doPost(e) {
  const { message } = JSON.parse(e.postData.contents);
  const chatId = message.chat.id;
  const text = message.text;
  const userId = message.from.id;
  const userName = message.from.first_name;

  if (!isCommand(text)) {
    return;
  }

  if (text.startsWith("/start")) {
    sendStartMessage(chatId);
  } else if (text.startsWith("/getuid")) {
    sendMessage(chatId, `‚ÑπÔ∏è *ID c·ªßa b·∫°n:* \`${userId}\``);
  } else if (text.startsWith("/help")) {
    sendMessage(chatId, startMessage);
  }

  if (!isAuthorizedUser(userId)) {
    sendMessage(chatId, "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.");
    return;
  }

  if (text.startsWith("/addusers") || text.startsWith("/delusers")) {
    if (!isAdmin(userId)) {
      sendMessage(chatId, "üö´ B·∫°n kh√¥ng ph·∫£i l√† admin.");
      return;
    }
    manageUsers(chatId, text);
  } else {
    if (text.startsWith("/report")) {
      handleReport(chatId, text, userId);
    } else if (text.startsWith("/resetall")) {
      resetSheet(chatId, userId);
    } else if (text.startsWith("/reset")) {
      resetUserSheet(chatId, userId);
    } else if (text.startsWith("/undo")) {
      undoLast(chatId, userId);
    } else {
      const transactionPattern = /^[0-9]+(k|tr)?\s+(thu|chi)\s+.+/i;
      if (transactionPattern.test(text)) {
        handleTransaction(chatId, text, userId, userName);
      }
    }
  }
}

function isCommand(text) {
  if (!text) return false;

  const validCommands = ["/start", "/addusers", "/delusers", "/report", "/reset", "/undo", "/getuid", "/resetall", "/help"];
  if (validCommands.some(cmd => text.startsWith(cmd))) {
    return true;
  }
  const transactionPattern = /^[0-9]+(k|tr)?\s+(thu|chi)\s+.+/i;
  return transactionPattern.test(text);
}

function isAdmin(userId) {
  return ADMIN_IDS.includes(String(userId));
}

function isAuthorizedUser(userId) {
  const sheet = getOrCreateUserSheet();
  const lastRow = sheet.getLastRow();

  if (lastRow < 2) return ADMIN_IDS.includes(String(userId));
  const userIds = sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat().map(String);
  return ADMIN_IDS.includes(String(userId)) || userIds.includes(String(userId));
}

function sendStartMessage(chatId) {
  ensureSheetsExist();
  sendMessage(chatId, startMessage);
}

function getOrCreateUserSheet() {
  const ss = SpreadsheetApp.openById(SHEET_ID);
  let usersSheet = ss.getSheetByName("users");

  if (!usersSheet) {
    usersSheet = ss.insertSheet("users");
    usersSheet.appendRow(["UserID"]);
  }

  return usersSheet;
}

function ensureSheetsExist() {
  const ss = SpreadsheetApp.openById(SHEET_ID);

  let transactionsSheet = ss.getSheetByName("transactions");
  if (!transactionsSheet) {
    transactionsSheet = ss.insertSheet("transactions");
    transactionsSheet.appendRow(["Th·ªùi gian", "Uid", "T√™n", "Lo·∫°i", "S·ªë ti·ªÅn", "M√¥ t·∫£"]);
  }

  let usersSheet = ss.getSheetByName("users");
  if (!usersSheet) {
    usersSheet = ss.insertSheet("users");
    usersSheet.appendRow(["UserID"]);
  }
}

function handleTransaction(chatId, text, userId, userName) {
  const [amount, type, ...desc] = text.split(" ");
  if (!isValidAmount(amount) || !["thu", "chi"].includes(type.toLowerCase())) {
    sendMessage(chatId, "‚ö†Ô∏è *L·ªói:* Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p:\n`<s·ªë ti·ªÅn> <thu/chi> <m√¥ t·∫£>`");
    return;
  }

  const description = desc.join(" ");
  const formattedDesc = description.charAt(0).toUpperCase() + description.slice(1);
  const parsedAmount = parseAmount(amount);
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("transactions");
  sheet.appendRow([
    new Date(),
    userId,
    userName,
    type.toLowerCase(),
    parsedAmount,
    formattedDesc || "Kh√¥ng c√≥ m√¥ t·∫£"
  ]);

  const currentTime = new Date().toLocaleString("vi-VN", {
    hour: "2-digit",
    minute: "2-digit",
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
    hour12: false
  });

  const responseMessage = [
    "‚úÖ *ƒê√£ th√™m giao d·ªãch m·ªõi th√†nh c√¥ng!*",
    "",
    `‚è∞ *Th·ªùi gian:* ${currentTime}`,
    `üí∞ *S·ªë ti·ªÅn:* ${formatCurrency(parsedAmount)}`,
    `${type.toLowerCase() === "thu" ? "üìà" : "üìâ"} *Lo·∫°i:* ${type.toLowerCase() === "thu" ? "Thu nh·∫≠p" : "Chi ti√™u"}`,
    `üìù *M√¥ t·∫£:* ${formattedDesc || "Kh√¥ng c√≥ m√¥ t·∫£"}`
  ].join("\n");

  sendMessage(chatId, responseMessage);
}

function manageUsers(chatId, text) {
  const args = text.split(" ");
  const command = args[0];
  const targetUserId = args[1];

  if (!targetUserId) {
    sendMessage(chatId, "üö´ B·∫°n c·∫ßn cung c·∫•p ID ng∆∞·ªùi d√πng.");
    return;
  }

  if (command === "/addusers") {
    addUser(chatId, targetUserId);
  } else if (command === "/delusers") {
    removeUser(chatId, targetUserId);
    resetUserSheet(chatId, targetUserId);
  } else {
    sendMessage(chatId, "üö´ L·ªánh kh√¥ng h·ª£p l·ªá.");
  }
}

function addUser(chatId, targetUserId) {
  const sheet = getOrCreateUserSheet();
  const lastRow = sheet.getLastRow();

  const existingUsers = lastRow > 1
    ? sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat().map(String)
    : [];

  if (existingUsers.includes(targetUserId)) {
    sendMessage(chatId, `üö´ Ng∆∞·ªùi d√πng ID ${targetUserId} ƒë√£ c√≥ trong danh s√°ch.`);
    return;
  }

  sheet.appendRow([targetUserId]);
  sendMessage(chatId, `‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng v·ªõi ID ${targetUserId}.`);
}

function removeUser(chatId, targetUserId) {
  const sheet = getOrCreateUserSheet();
  const lastRow = sheet.getLastRow();

  if (lastRow < 2) {
    sendMessage(chatId, `üö´ Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o trong danh s√°ch.`);
    return;
  }

  const userIds = sheet.getRange(2, 1, lastRow - 1, 1).getValues().flat().map(String);
  const userIndex = userIds.indexOf(String(targetUserId));

  if (userIndex === -1) {
    sendMessage(chatId, `üö´ Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID ${targetUserId}.`);
    return;
  }

  sheet.deleteRow(userIndex + 2);
  sendMessage(chatId, `‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng v·ªõi ID ${targetUserId}.`);
}

function handleReport(chatId, text, userId) {
  const dateRegex = /\d{2}\/\d{4}|\d{2}\/\d{2}\/\d{4}/;
  const dateParam = text.match(dateRegex)?.[0];
  let filter = "all";
  let sortOrder = null;

  if (text.includes("az")) {
    sortOrder = "az";
  } else if (text.includes("za")) {
    sortOrder = "za";
  }

  if (dateParam) {
    filter = dateParam.length === 7 ? "month" : "week";
  }

  generateReport(chatId, filter, dateParam, sortOrder, userId);
}

function generateReport(chatId, filter, dateParam, sortOrder, userId) {
  const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("transactions");
  if (!sheet) {
    sendMessage(chatId, "‚ö†Ô∏è *L·ªói:* Kh√¥ng t√¨m th·∫•y sheet `transactions`.");
    return;
  }

  const data = sheet.getDataRange().getValues().slice(1);

  if (!data.length) {
    sendMessage(chatId, "üìä *Th√¥ng b√°o:* Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ t·∫°o b√°o c√°o.");
    return;
  }

  const now = parseDate(filter, dateParam);
  const filteredData = data.filter(([date, uid]) =>
    uid === userId && isValidDate(new Date(date), filter, now)
  );

  if (sortOrder) {
    filteredData.sort((a, b) => {
      const amountA = a[4];
      const amountB = b[4];
      return sortOrder === "az" ? amountA - amountB : amountB - amountA;
    });
  }

  const incomeTransactions = [];
  const expenseTransactions = [];
  let [income, expense] = [0, 0];

  filteredData.forEach(([date, uid, userName, type, amount, desc]) => {
    const formattedReportDate = new Date(date).toLocaleString("vi-VN", {
      hour: "2-digit",
      minute: "2-digit",
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
      hour12: false,
    });

    const transaction = `- \`${formatCurrency(amount)}\` : ${desc || "Kh√¥ng c√≥ m√¥ t·∫£"} | \`${formattedReportDate}\``;

    if (type === "thu") {
      income += amount;
      incomeTransactions.push(transaction);
    } else if (type === "chi") {
      expense += amount;
      expenseTransactions.push(transaction);
    }
  });

  if (!filteredData.length) {
    const range = filter === "week" ? "tu·∫ßn" : "th√°ng";
    sendMessage(chatId, `‚ö†Ô∏è *Th√¥ng b√°o:* Kh√¥ng c√≥ giao d·ªãch n√†o trong ${range} ƒë∆∞·ª£c y√™u c·∫ßu.`);
    return;
  }

  const weekInfo =
    filter === "week"
      ? `\nüìÖ *Th·ªùi gian:* ${now.startOfWeek.toLocaleDateString("vi-VN")} - ${now.endOfWeek.toLocaleDateString("vi-VN")}`
      : "";

  let reportTitle;
  switch (filter) {
    case "all":
      reportTitle = "üìä *B√ÅO C√ÅO T·ªîNG H·ª¢P*";
      break;
    case "month":
      reportTitle = `üìä *B√ÅO C√ÅO TH√ÅNG ${dateParam}*`;
      break;
    case "week":
      reportTitle = "üìä *B√ÅO C√ÅO TU·∫¶N*";
      break;
  }

  const balance = income - expense;
  const balanceIcon = balance >= 0 ? "üìà" : "üìâ";

  const report = [
    reportTitle,
    weekInfo,
    "",
    "üí∞ *T·ªîNG QUAN*",
    `‚îú‚îÄ üì• Thu nh·∫≠p: \`${formatCurrency(income)}\``,
    `‚îú‚îÄ üì§ Chi ti√™u: \`${formatCurrency(expense)}\``,
    `‚îî‚îÄ ${balanceIcon} C√¢n ƒë·ªëi: \`${formatCurrency(balance)}\`\n`,
    "",
    "üìã *CHI TI·∫æT*",
    "",
    "üì• *Giao d·ªãch thu nh·∫≠p:*",
    incomeTransactions.length ? incomeTransactions.join("\n") : "      üí¨ Kh√¥ng c√≥ giao d·ªãch thu nh·∫≠p",
    "",
    "üì§ *Giao d·ªãch chi ti√™u:*",
    expenseTransactions.length ? expenseTransactions.join("\n") : "      üí¨ Kh√¥ng c√≥ giao d·ªãch chi ti√™u",
    "",
    sortOrder ? `\nüîÑ *S·∫Øp x·∫øp:* ${sortOrder === "az" ? "TƒÉng d·∫ßn" : "Gi·∫£m d·∫ßn"}` : "",
  ].filter(Boolean).join("\n");

  sendMessage(chatId, report);
}

function resetSheet(chatId, userId) {
  try {
    if (!isAdmin(userId)) {
      sendMessage(chatId, "üö´ B·∫°n kh√¥ng ph·∫£i l√† admin.");
      return;
    }
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("transactions");
    if (!sheet) {
      sendMessage(chatId, "‚ö†Ô∏è *L·ªói:* Kh√¥ng t√¨m th·∫•y sheet `transactions`.");
      return;
    }
    sheet.clear();
    sheet.appendRow(["Th·ªùi gian", "Uid", "T√™n", "Lo·∫°i", "S·ªë ti·ªÅn", "M√¥ t·∫£"]);
    sendMessage(chatId, "‚úÖ *ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu.*", true);
  } catch (error) {
    console.error("L·ªói trong h√†m resetSheet:", error);
    sendMessage(chatId, "‚ùå *ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu.*", true);
  }
}

function resetUserSheet(chatId, userId) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("transactions");

    if (!sheet) {
      sendMessage(chatId, "‚ö†Ô∏è *L·ªói:* Kh√¥ng t√¨m th·∫•y sheet `transactions`.");
      return;
    }

    const data = sheet.getDataRange().getValues();
    const filteredData = data.filter(row => row[1] !== userId);

    sheet.clear();
    sheet.appendRow(["Th·ªùi gian", "Uid", "T√™n", "Lo·∫°i", "S·ªë ti·ªÅn", "M√¥ t·∫£"]);

    if (filteredData.length > 1) {
      sheet.getRange(2, 1, filteredData.length - 1, filteredData[0].length).setValues(filteredData.slice(1));
    }

    sendMessage(chatId, "‚úÖ *ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu.*", true);
  } catch (error) {
    console.error("L·ªói trong h√†m resetSheet:", error);
    sendMessage(chatId, "‚ùå *ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu.*", true);
  }
}

function undoLast(chatId, userId) {
  try {
    const sheet = SpreadsheetApp.openById(SHEET_ID).getSheetByName("transactions");
    if (!sheet) {
      sendMessage(chatId, "‚ö†Ô∏è *L·ªói:* Kh√¥ng t√¨m th·∫•y sheet `transactions`.");
      return;
    }
    const data = sheet.getDataRange().getValues();
    const lastUserTransactionIndex = data.map(row => row[1]).lastIndexOf(userId);

    if (lastUserTransactionIndex > 0) {
      sheet.deleteRow(lastUserTransactionIndex + 1);
      sendMessage(chatId, "‚úÖ *ƒê√£ x√≥a giao d·ªãch g·∫ßn nh·∫•t c·ªßa b·∫°n.*", true);
    } else {
      sendMessage(chatId, "‚ÑπÔ∏è *Kh√¥ng c√≥ giao d·ªãch n√†o c·ªßa b·∫°n ƒë·ªÉ x√≥a.*", true);
    }
  } catch (error) {
    console.error("L·ªói trong h√†m undoLast:", error);
    sendMessage(chatId, "‚ùå *ƒê√£ x·∫£y ra l·ªói khi x√≥a giao d·ªãch.*", true);
  }
}

function isValidDate(date, filter, now) {
  if (filter === "month") {
    return (
      date.getMonth() === now.getMonth() &&
      date.getFullYear() === now.getFullYear()
    );
  }
  if (filter === "week") {
    const { startOfWeek, endOfWeek } = now;
    return date >= startOfWeek && date <= endOfWeek;
  }
  return true;
}

function parseDate(filter, dateParam) {
  if (!dateParam) return new Date();
  const parts = dateParam.split("/");
  if (filter === "month" && parts.length === 2) {
    return new Date(parts[1], parts[0] - 1);
  }
  if (filter === "week" && parts.length === 3) {
    const date = new Date(parts[2], parts[1] - 1, parts[0]);
    const dayOfWeek = date.getDay() || 7;
    date.startOfWeek = new Date(date);
    date.startOfWeek.setDate(date.getDate() - dayOfWeek + 1);
    date.endOfWeek = new Date(date.startOfWeek);
    date.endOfWeek.setDate(date.startOfWeek.getDate() + 6);
    return date;
  }
  return new Date();
}

function parseAmount(amount) {
  return parseFloat(amount.replace(/tr/gi, "000000").replace(/k/gi, "000")) || 0;
}

function isValidAmount(amount) {
  return /^[0-9]+(k|tr)?$/i.test(amount);
}

function formatCurrency(amount) {
  return new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(amount);
}

function sendMessage(chatId, text) {
  const MAX_MESSAGE_LENGTH = 4096;
  if (text.length <= MAX_MESSAGE_LENGTH) {
    UrlFetchApp.fetch(`${API_URL}/sendMessage`, {
      method: "post",
      contentType: "application/json",
      payload: JSON.stringify({ chat_id: chatId, text, parse_mode: "Markdown" }),
    });
  } else {
    const parts = splitMessage(text, MAX_MESSAGE_LENGTH);
    parts.forEach(part => {
      UrlFetchApp.fetch(`${API_URL}/sendMessage`, {
        method: "post",
        contentType: "application/json",
        payload: JSON.stringify({ chat_id: chatId, text: part, parse_mode: "Markdown" }),
      });
    });
  }
}

function splitMessage(text, maxLength) {
  const parts = [];
  while (text.length > maxLength) {
    let part = text.slice(0, maxLength);
    const lastNewLineIndex = part.lastIndexOf('\n');
    if (lastNewLineIndex > -1) {
      part = text.slice(0, lastNewLineIndex + 1);
    }
    parts.push(part);
    text = text.slice(part.length);
  }
  parts.push(text);
  return parts;
}
